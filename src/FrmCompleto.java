/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lenovo
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class FrmCompleto extends javax.swing.JFrame {
    private java.util.ArrayList<Integer> listaNumeros = new java.util.ArrayList<>();
    private int pasos = 0;
    
    private void log(String msg) {
        txtProceso.append(msg + "\n");
    }
    
    private ArrayList<Integer> mezclaDirecta(ArrayList<Integer> lista) {
        if (lista == null || lista.size() <= 1) return lista;
        int medio = lista.size() / 2;
        ArrayList<Integer> izquierda = new ArrayList<>(lista.subList(0, medio));
        ArrayList<Integer> derecha  = new ArrayList<>(lista.subList(medio, lista.size()));

        izquierda = mezclaDirecta(izquierda);
        derecha  = mezclaDirecta(derecha);

        return fusionar(izquierda, derecha);
    }

    private ArrayList<Integer> fusionar(ArrayList<Integer> a, ArrayList<Integer> b) {
        ArrayList<Integer> res = new ArrayList<>();
        int i = 0, j = 0;
        while (i < a.size() && j < b.size()) {
            pasos++; 
            if (a.get(i) <= b.get(j)) {
                res.add(a.get(i++));
            } else {
                res.add(b.get(j++));
            }
        }
        while (i < a.size()) res.add(a.get(i++));
        while (j < b.size()) res.add(b.get(j++));
        return res;
    }
    
    private ArrayList<Integer> fusionNatural(ArrayList<Integer> lista) {
        if (lista == null || lista.size() <= 1) return lista;

        ArrayList<ArrayList<Integer>> runs = new ArrayList<>();
        ArrayList<Integer> run = new ArrayList<>();
        run.add(lista.get(0));

        for (int i = 1; i < lista.size(); i++) {
            if (lista.get(i) >= lista.get(i - 1)) {
                run.add(lista.get(i));
            } else {
                runs.add(new ArrayList<>(run));
                run.clear();
                run.add(lista.get(i));
            }
        }
        runs.add(run);

        log("Subsecuencias iniciales: " + runs);

        while (runs.size() > 1) {
            ArrayList<Integer> left = runs.remove(0);
            ArrayList<Integer> right = runs.remove(0);
            ArrayList<Integer> fused = fusionar(left, right);
            log("Fusión: " + left + " + " + right + " => " + fused);
            runs.add(fused);
        }

        return runs.get(0);
    }
    
    private ArrayList<Integer> mezclaEquilibradaMultiple(ArrayList<Integer> lista) {
        if (lista == null || lista.size() <= 1) return lista;

        int k = 3; 
        log("Iniciando Mezcla Equilibrada Múltiple (k=" + k + ")...");

        ArrayList<ArrayList<Integer>> partes = new ArrayList<>();
        int tam = (int) Math.ceil((double) lista.size() / k);

        for (int i = 0; i < lista.size(); i += tam) {
            int fin = Math.min(i + tam, lista.size());
            ArrayList<Integer> sub = new ArrayList<>(lista.subList(i, fin));
            Collections.sort(sub); 
            partes.add(sub);
            log("Segmento ordenado: " + sub);
        }

        ArrayList<Integer> resultado = new ArrayList<>();
        for (ArrayList<Integer> p : partes) resultado.addAll(p);

        Collections.sort(resultado); 
        log("Resultado final (Equilibrada Múltiple): " + resultado);
        return resultado;
    }
    
    private ArrayList<Integer> metodoPolifasico(ArrayList<Integer> lista) {
        if (lista == null || lista.size() <= 1) return lista;
        log("Iniciando Método Polifásico (simulado)...");

        ArrayList<ArrayList<Integer>> runs = new ArrayList<>();
        int i = 0;

        while (i < lista.size()) {
            int tamCorrida = Math.min((i % 5) + 3, lista.size() - i); 
            ArrayList<Integer> corrida = new ArrayList<>(lista.subList(i, i + tamCorrida));
            Collections.sort(corrida);
            runs.add(corrida);
            log("Corrida creada: " + corrida);
            i += tamCorrida;
        }

        while (runs.size() > 1) {
            ArrayList<Integer> a = runs.remove(0);
            ArrayList<Integer> b = runs.remove(0);
            ArrayList<Integer> fusion = fusionar(a, b);
            log("Fusionando: " + a + " + " + b + " => " + fusion);
            runs.add(fusion);
        }

        log("Resultado final (Polifásico): " + runs.get(0));
        return runs.get(0);
    }

    /**
     * Creates new form FrmCompleto
     */
    public FrmCompleto() {
        initComponents();
        txtNumeros.setEditable(false);
        txtProceso.setEditable(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCargar = new javax.swing.JButton();
        spnCantidad = new javax.swing.JSpinner();
        cmbAlgoritmo = new javax.swing.JComboBox<>();
        btnOrdenar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNumeros = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtProceso = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCargar.setText("Cargar números");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        spnCantidad.setModel(new javax.swing.SpinnerNumberModel(100, 1, 1000, 10));

        cmbAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mezcla Directa", "Fusión Natural", "Mezcla Equilibrada Múltiple", "Método Polifásico" }));

        btnOrdenar.setText("Ordenar");
        btnOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarActionPerformed(evt);
            }
        });

        txtNumeros.setEditable(false);
        txtNumeros.setColumns(20);
        txtNumeros.setRows(5);
        jScrollPane1.setViewportView(txtNumeros);

        txtProceso.setEditable(false);
        txtProceso.setColumns(20);
        txtProceso.setRows(5);
        jScrollPane2.setViewportView(txtProceso);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCargar)
                            .addComponent(cmbAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnOrdenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spnCantidad)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargar)
                    .addComponent(spnCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOrdenar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        listaNumeros.clear();
        txtProceso.setText("");
        txtNumeros.setText("");

        int cantidad = 100; 
        try {
            cantidad = (Integer) spnCantidad.getValue();
        } catch (Exception e) {
        }

        java.util.Random rnd = new java.util.Random();
        for (int i = 0; i < cantidad; i++) {
            listaNumeros.add(rnd.nextInt(1000) + 1); 
        }

        txtNumeros.setText(listaNumeros.toString());
        txtProceso.setText("Se generaron " + listaNumeros.size() + " números.\n");
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarActionPerformed
        // TODO add your handling code here:
        if (listaNumeros.isEmpty()) {
            txtProceso.setText("Primero cargue los números.\n");
            return;
        }

        String algoritmo = cmbAlgoritmo.getSelectedItem().toString();
        txtProceso.setText(""); 
        pasos = 0; 

        long inicio = System.nanoTime(); 
        ArrayList<Integer> resultado = null;

        switch (algoritmo) {
            case "Mezcla Directa":
                resultado = mezclaDirecta(new ArrayList<>(listaNumeros));
                break;
            case "Fusión Natural":
                resultado = fusionNatural(new ArrayList<>(listaNumeros));
                break;
            case "Mezcla Equilibrada Múltiple":
                resultado = mezclaEquilibradaMultiple(new ArrayList<>(listaNumeros));
                break;
            case "Método Polifásico":
                resultado = metodoPolifasico(new ArrayList<>(listaNumeros));
                break;
            default:
                txtProceso.setText("Algoritmo no reconocido.\n");
                return;
        }

        long fin = System.nanoTime();
        long tiempoMs = (fin - inicio) / 1_000_000;

        txtProceso.append("\n--- Resumen ---\n");
        txtProceso.append("Algoritmo: " + algoritmo + "\n");
        txtProceso.append("Tiempo de ejecución: " + tiempoMs + " ms\n");
        txtProceso.append("Pasos contados (aprox.): " + pasos + "\n");
        txtProceso.append("Resultado (primeros 100 elementos): \n");
        int limite = Math.min(100, resultado.size());
        txtProceso.append(resultado.subList(0, limite).toString() + "\n");
    }//GEN-LAST:event_btnOrdenarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCompleto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnOrdenar;
    private javax.swing.JComboBox<String> cmbAlgoritmo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spnCantidad;
    private javax.swing.JTextArea txtNumeros;
    private javax.swing.JTextArea txtProceso;
    // End of variables declaration//GEN-END:variables
}
